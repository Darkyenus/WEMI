@file:Suppress("UnusedImport") // Because Kotlin has problems with files in default packages?

import wemi.Configurations.compilingJava
import wemi.Configurations.compilingKotlin
import wemi.compile.KotlinCompilerVersion
import wemi.compile.KotlinJVMCompilerFlags
import wemi.createProject
import wemi.util.div
import wemi.util.executable
import java.nio.file.Files

import core
import createKotlinCompilerProject
import CompilerProjects
import wemi.Archetypes
import wemi.Keys
import wemi.assembly.AssemblyOperation
import wemi.assembly.DefaultRenameFunction
import wemi.assembly.MergeStrategy
import wemi.boot.WemiBuildScript
import wemi.compile.KotlinCompilerFlags
import wemi.dependency.LocalM2Repository
import wemi.dependency.Repository
import wemi.util.LocatedFile
import java.net.URL
import java.util.zip.ZipEntry

val CompilerProjects = listOf(
        createKotlinCompilerProject("1.1.4-3"),
        createKotlinCompilerProject("1.1.61"),
        createKotlinCompilerProject("1.2.20"),
        createKotlinCompilerProject("1.2.21")
)

val core by project(path(".")) {
    projectName set { "wemi" }
    projectGroup set { "com.darkyen" }
    projectVersion set { "0.3-SNAPSHOT" }

    kotlinVersion set { KotlinCompilerVersion.Version1_2_21 }

    mainClass set { "wemi.boot.MainKt" }

    repositories add { repository("jitpack", "https://jitpack.io") }

    libraryDependencies set { listOf(
            kotlinDependency("stdlib"),
            dependency("org.slf4j", "slf4j-api", "1.7.25"),
            dependency("com.github.Darkyenus", "tproll", "v1.2.5"),
            dependency("com.github.Darkyenus", "DaveWebb", "v1.2"),
            dependency("com.github.EsotericSoftware", "jsonbeans", "cb0f3406fc"),
            dependency("org.jline", "jline", "3.3.0")
        ) }

    // Compile-only (provided) libraries
    extend(compiling) {
        libraryDependencies add {
            /* Used ONLY in wemi.test.forked.TestLauncher */
            dependency("org.junit.platform", "junit-platform-launcher", "1.0.2")
        }

        libraryDependencies add {
            // TODO Replace with definition in Wemi after update
            val  JCenter = Repository.M2("jcenter", URL("https://jcenter.bintray.com/"), LocalM2Repository)

            /*Â Used only in wemi.document.DokkaInterface */
            dependency("org.jetbrains.dokka", "dokka-fatjar", "0.9.15", JCenter)
        }
    }

    extend(testing) {
        libraryDependencies add { JUnitAPI }
        libraryDependencies add { JUnitEngine }
    }

    extend(assembling) {
        // Add all compiler frontends to the internal classpath
        internalClasspath modify { cp ->
            val cpWithCompilers = ArrayList(cp)

            for (p in CompilerProjects) {
                p.evaluate {
                    cpWithCompilers.addAll(internalClasspath.get())
                }
            }

            cpWithCompilers
        }

        // Add .jar with sources to resource files
        resourceFiles add {
            AssemblyOperation().use { asOp ->
                val sourcePath = WemiBuildScript!!.cacheFolder / "source.zip"

                for (file in using(compilingJava) { Keys.sourceFiles.get() }) {
                    asOp.addSource(file, true, false)
                }
                for (file in using(compilingKotlin) { Keys.sourceFiles.get() }) {
                    asOp.addSource(file, true, false)
                }

                asOp.assembly({ MergeStrategy.Deduplicate }, DefaultRenameFunction, sourcePath, byteArrayOf(), false)

                LocatedFile(sourcePath)
            }
        }
    }

    assemblyPrependData set {
        "#!/usr/bin/env sh\nexec java -jar \"$0\" -root=\"$(dirname \"$0\")\" \"$@\"\n\n"
                .toByteArray(Charsets.UTF_8)
    }

    assemblyOutputFile set {
        val assemblyDir = buildDirectory.get() / "assembly"
        Files.createDirectories(assemblyDir)
        assemblyDir / "wemi"
    }

    assembly modify { assembled ->
        assembled.executable = true
        assembled
    }
}

fun createKotlinCompilerProject(version:String):Project {
    val projectName = StringBuilder("kotlinc_")
    for (c in version) {
        if (c.isJavaIdentifierPart()) {
            projectName.append(c)
        } else {
            projectName.append('_')
        }
    }

    return createProject(projectName.toString(), path("src/main-kotlinc/$version"), Archetypes.JavaKotlinProject) {

        extendMultiple(compilingJava, compilingKotlin) {
            sourceRoots set { listOf(projectRoot / "src") }
        }

        extend(compilingKotlin) {
            compilerOptions[KotlinCompilerFlags.customFlags] += "-Xskip-runtime-version-check"
        }

        projectDependencies set {
            listOf(core.dependency())
        }

        libraryDependencies set { listOf(
                dependency("org.jetbrains.kotlin", "kotlin-compiler", version),
                dependency("org.slf4j", "slf4j-api", "1.7.25")
        ) }

    }
}


